React.createElement(type, props, children)
ReactDOM.createRoot(container, options).render(element, container, callback)

add npm to our workspace -- npm init -> it create package.json, so you can install packages
npm install -D parcel  -> -D is denotes it as Dev dependency

bundler - to bundle all html, css, js files
Known Bundlers - WebPack, Parcel, Vite, etc.

-dev build
-local server
-HMR (Hot Module Replacement)
-file watching Algorithm
-caching-faster builds
-minification
-bundling
-consistent hashing


^ upgrades minor version only
~ upgrades major version

JSX -> HTML like syntax
babel -> Javascript Compiler. It conversts JSX to JS

Component Composition -> the process of combining smaller, reusable components to build more complex UI elements or applications.

>> uniqueid as key is best practice; using indexes as keys is last resort. 
unique key from backend >>>>> index as a key >>>>> not using keys (not acceptable...) 

whenever a state variable updates, React triggers reconciliation cycleI (re-renders the component).

Reconciliation Algorithm (React Fiber)
DOM
VirtualDOM is representation of actual DOM
Diff Algorithm


Conditional Rendering -> Rendering based on condition


useEffect(()=> {}) >> If no dependency array present >> useEffect get called on every render.
useEffect(() => {}, []) >> If dependency array is empty >> useEffect get called on initial render only (just once).
useEffect(() => {}, [btnName]) >> If dependency array is [btnName] >> useEffect get called everytime btnName is updated.


React Router DOM

const appRouter = createBrowserRouter([])
<RouterProvider router={appRouter} />


2 types of routing in web apps
- client side routing
- server side routing


Hooks
- useState(null); -- useState<T>(initialState: T | (() => T)): [T, React.Dispatch<React.SetStateAction<T>>]
- useEffect(()=> {}, []); -- useEffect(effect: React.EffectCallback, deps?: React.DependencyList): void
- useRouteError(); -- useRouteError(): unknown
- useParams(); -- useParams<string>(): Readonly<Params<string>>


Two phases in Lifecycle
- Render Phase
- Commit Phase


>>> start json server: npx json-server --watch db.json --port 8080

Higher Order Components